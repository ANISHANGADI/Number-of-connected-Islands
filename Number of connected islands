class Solution {
    private:
    void bfs(int row,int col,vector<vector<int>>& vis,vector<vector<char>>& grid)
    {
        vis[row][col]=1;
        queue<pair<int,int>>q;
        q.push({row,col});
        int n=grid.size();
        int m=grid[0].size();
        while(!q.empty())
        {   
            int nrow=q.front().first;
            int ncol=q.front().second;
            q.pop();
            for(int a=-1;a<=1;a++){
                for(int b=-1;b<=1;b++){
                    int delrow=nrow+a;
                    int delcol=ncol+b;
                    if(delrow>=0 && delrow<n && delcol>=0 && delcol<m && grid[delrow][delcol]=='1' && !vis[delrow][delcol])
                    {
                        vis[delrow][delcol]=1;
                        q.push({delrow,delcol});
                    }
                }
            }
            
        }
    }
  public:
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        int n=grid.size();
        int m= grid[0].size();
        int cnt=0;
        vector<vector<int>>vis(n,vector<int>(m,0));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!vis[i][j] && grid[i][j]=='1')
                {
                    cnt++;
                    bfs(i,j,vis,grid);
                }
            }
        }
        return cnt;
    }
};
